// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
@use 'sass:map';
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

@mixin selected($theme) {
  // Get the color config from the theme.
  $color-config: mat.get-color-config($theme);

  $primary-palette: map.get($color-config, 'primary');
  $accent-palette: map.get($color-config, 'accent');

  @if map.get($color-config, 'is-dark') {
    .selected {
      background-color: mat.get-color-from-palette($primary-palette, 700) !important;
    }
    .hoverlight:hover {
      background-color: mat.get-color-from-palette($primary-palette, 900);
    }
    .hoverdark:hover {
      background-color: mat.get-color-from-palette($primary-palette, 800);
    }
    .accent-contrast {
      color: mat.get-color-from-palette($accent-palette, 100);
    }
    .mat-drawer-container,
    .mat-drawer {
      background-color: $dark-background-color;
    }
    .mat-card {
      background: $dark-background-color-2;
    }
    .border-highlight {
      border-color: mat.get-color-from-palette($accent-palette, 200);
    }
  } @else {
    .selected {
      background-color: mat.get-color-from-palette($primary-palette, 400) !important;
    }
    .hoverlight:hover {
      background-color: mat.get-color-from-palette($primary-palette, 100);
    }
    .hoverdark:hover {
      background-color: mat.get-color-from-palette($primary-palette, 200);
    }
    .accent-contrast {
      color: mat.get-color-from-palette($accent-palette, 900);
    }
    .border-highlight {
      border-color: mat.get-color-from-palette($accent-palette, 900);
    }
  }
}

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$glimpse-primary: mat.define-palette(mat.$grey-palette);
$glimpse-accent: mat.define-palette(mat.$purple-palette);

// The warn palette is optional (defaults to red).
$glimpse-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$glimpse-theme: mat.define-light-theme(
  (
    color: (
      primary: $glimpse-primary,
      accent: $glimpse-accent,
      warn: $glimpse-warn,
    ),
  )
);

// Define a dark theme
$dark-primary: mat.define-palette(mat.$blue-gray-palette);
$dark-accent: mat.define-palette(mat.$pink-palette);
$dark-theme: mat.define-dark-theme(
  (
    color: (
      primary: $dark-primary,
      accent: $dark-accent,
    ),
  )
);
$dark-background-color: #181b1f;
$dark-background-color-2: #24272b;
$dark-background: map-get($dark-theme, background);
$dark-background: map_merge(
  $dark-background,
  (
    background: $dark-background-color,
  )
);
$dark-theme: map_merge(
  $dark-theme,
  (
    background: $dark-background,
  )
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($glimpse-theme);
@include selected($glimpse-theme);

// Apply the dark theme only when the `.my-dark-theme` CSS class is applied
// to an ancestor element of the components (such as `body`).
.dark-theme {
  @include mat.all-component-themes($dark-theme);
  @include selected($dark-theme);
}

/* You can add global styles to this file, and also import other style files */

html,
body {
  min-height: 100%;
}
body {
  margin: 0;
  font-family: Roboto, 'Helvetica Neue', sans-serif;
}

.flex {
  display: flex;
}
.flex-col {
  display: flex;
  flex-direction: column;
}
.flex-wrap {
  flex-wrap: wrap;
}
.justify-content-center {
  justify-content: center;
}
.align-items-center {
  align-items: center;
}
.align-items-start {
  align-items: flex-start;
}
.space-around {
  justify-content: space-around;
}
.space-between {
  justify-content: space-between;
}
.fill {
  width: 100%;
}

.mat-button-toggle-label-content {
  line-height: 36px !important;
}

.mat-drawer-inner-container {
  overflow-x: hidden !important;
}

// Margins
.m-1 {
  margin: 1px !important;
}
.m-2 {
  margin: 2px !important;
}
.m-3 {
  margin: 3px !important;
}
.m-4 {
  margin: 4px !important;
}
.m-5 {
  margin: 5px !important;
}
.m-6 {
  margin: 6px !important;
}
.m-7 {
  margin: 7px !important;
}
.m-8 {
  margin: 8px !important;
}

.unselectable {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}
